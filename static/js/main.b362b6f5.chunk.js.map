{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","msg","Navbar","mode","href","title","id","onClick","toggleRedMode","htmlFor","toggleMode","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","placeholder","rows","newText","toUpperCase","toLowerCase","navigator","clipboard","writeText","replace","trim","arr","split","forEach","element","index","indexOf","pop","length","wordLength","defaultProps","aboutText","App","setMode","setAlert","showAlert","message","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b362b6f5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-danger alert-dismissible fade show\" role=\"alert\"`}>\r\n            <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n}\r\nexport default Alert;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode === \"danger\" || props.mode === \"dark\" ? \"dark\" : \"light\"} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">About</Link>\r\n                        </li> */}\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                    </ul>\r\n                    <div className=\"form-check form-switch mx-2\">\r\n                        <input className=\"form-check-input\" onClick={props.toggleRedMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className={`form-check-label text-${props.mode === 'light' ? 'success' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">Red Mode</label>\r\n                    </div>\r\n                    <div className=\"form-check form-switch mx-2\">\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault2\" />\r\n                        <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault2\">Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'No title provided',\r\n    aboutText: 'No about text provided'\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"upper case button was clicked\")`\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n    }\r\n    const handleCopyClick = () => {\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n    }\r\n    const handeExtraSpaces = () => {\r\n        let newText = text.replace(/\\s+/g, ' ').trim()\r\n        setText(newText)\r\n    }\r\n    const handleClearClick = () => {\r\n        setText('')\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('')\r\n    // text = \"new text\"; // Wrong way to setText\r\n    // setText(\"new Text\"); //Correct way to set Text\r\n    const wordLength = (text) => {\r\n        let arr = text.split(\" \")\r\n        arr.forEach(element => {\r\n            if (element === \"\") {\r\n                let index = arr.indexOf(element);\r\n                arr.pop(index)\r\n            }\r\n        });\r\n        return arr.length\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{ color: props.mode === 'danger' || props.mode === \"dark\" ? 'white' : 'black' }}>\r\n                <div className=\"container\">\r\n                    <h1>{props.heading}</h1>\r\n                    <div className=\"mb-3\">\r\n                        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' || props.mode === 'danger' ? 'grey' : 'white', color: props.mode === 'dark' || props.mode === \"danger\" ? 'white' : 'black' }} placeholder=\"Enter your text\" id=\"myBox\" rows=\"10\"></textarea>\r\n                    </div>\r\n                    <button className=\"btn btn-primary m-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                    <button className=\"btn btn-primary m-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n                    <button className=\"btn btn-primary m-2\" onClick={handleCopyClick}>Copy text</button>\r\n                    <button className=\"btn btn-primary m-2\" onClick={handeExtraSpaces}>Trim Extra Spaces</button>\r\n                    <button className=\"btn btn-primary m-2\" onClick={handleClearClick}>Clear Text</button>\r\n\r\n                </div>\r\n                <div className=\"container my-4\">\r\n                    <h2>Your text summary</h2>\r\n                    <p>{wordLength(text)} words and {text.length} characters</p>\r\n                    <p>{text.split('\\n').length} sentences</p>\r\n                    <p>{0.008 * text.split(\" \").length} Minutes to read this text</p>\r\n                    <h3>Text Preview</h3>\r\n                    <p><strong>{text.length > 0 ? text : 'Enter something in textbox to preview here'}</strong></p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#00235c';\n      showAlert(\"Dark Mode has been Enabled\", \"danger\")\n    }\n    else if (mode === 'danger') {\n      setMode('light')\n      document.body.style.backgroundColor = '#00235c';\n      showAlert(\"Dark Mode has been Enabled\", \"danger\")\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been Enabled\", \"success\")\n    }\n  }\n  const toggleRedMode = () => {\n    if (mode === 'light') {\n      setMode('danger');\n      document.body.style.backgroundColor = '#c9003c';\n      showAlert(\"Green Mode has been Enabled\", \"success\")\n    }\n    else if (mode === 'dark') {\n      setMode('danger');\n      document.body.style.backgroundColor = '#c9003c';\n      showAlert(\"Green Mode has been Enabled\", \"success\")\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been Enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} toggleRedMode={toggleRedMode} />\n      <Alert alert={alert} />\n      <div className=\"container mt-5\">\n        {/* <Switch> */}\n        {/* <Route exact path=\"/about\"> */}\n        {/* <About /> */}\n        {/* </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm heading=\"Enter the text to analyze\" showAlert={showAlert} mode={mode} />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}